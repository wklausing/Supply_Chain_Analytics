ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
x
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
ylab(Month)
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
ylab(y)
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
ylab("Hewfwef")
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_x_discrete(labels=Month) +
ylab("Hewfwef")
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_x_discrete(labels=Month)
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_x_discrete(labels=y)
y
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_x_discrete(labels=dist(y$Month))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_discrete(labels=dist(y$Month))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: .")
x= subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum)
ls(x)
str(x)
x <- data.frame(lapply(x, as.character), stringsAsFactors=FALSE)
x
str(x)
x= subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum)
x$Month <- lapply(x$Month, as.character)
str(x)
ls(x)
str(x)
x= subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum)
x[1] <- lapply(x[1], as.character)
str(x)
x[2] <- lapply(x[2], as.character)
str(x)
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
lapply(.[2], as.character) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
lapply(., as.character) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
lapply(., as.character)
df <- subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum)
df[2] <- lapply(df[2], as.character)
ggplot(df, aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: .")
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(data = ., aes(x = Month, y = OTD)) +
geom_line(aes(colour=vendor)) +
geom_point(size = 1, aes(colour=vendor)) +
ggtitle("OTD Performance in 2017") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: .")
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x =
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: .")
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: .")
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2,3,4,5,6,7,8,9,10,11,12))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2,3,4))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2,3))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2,3))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2,3))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,2,3,4))
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,12,1))
cat("Kommentar: .")
subset(services, service=="Shipping" & Year=="2017") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,12,1))
#Erzeuge Subset von Services
subset(services, service=="Shipping" & Year=="2017" & Product=="Gruppe105") %>%
aggregate(OTD ~vendor+Month, data=., sum) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,12,1))
cat("Kommentar: .")
subset(services, service=="Shipping" & Year=="2017" & Product=="Gruppe105") %>%
aggregate(OTD ~vendor+Month, data=., mean) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,12,1))
cat("Kommentar: .")
#Heat-Map zeichen lassen für Shipping-DL, Jahr=2017 und unsere Produkt Gruppe105.
subset(services, service=="Shipping" & Year=="2017" & Product=="Gruppe105") %>%
aggregate(OTD ~vendor+Month, data=., mean) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,12,1))
cat("Kommentar: Das Diagramm zeigt das alle Lieferanten mal gut mal schlecht abschneiden. Besonders schlechte Performance eines Lieferanten sticht sofort durch ein kräftiges Rot ins Auge, während besonders gute Performance durch ein helles Grün auffällt. Da die Struktur des Diagramm kann man schnell Handlungsempfehlungen ableiten. So sollte man z.B. im Februar EPD Shipping meiden und stattdessen auf HCX Shipping setzen.")
knitr::opts_chunk$set(echo = TRUE)
cost = read.csv2("output_cost_8Players_v0010.csv")
prices = read.csv2("output_prices_8Players_v0010.csv")
services = read.csv2("output_services_8Players_v0010.csv")
transactions = read.csv2("output_transactions_8Players_v0010.csv")
# Zusammenfassung einer Variable anzeigen
summary(cost)
summary(prices)
summary(services)
summary(transactions)
df = data.frame(unique(transactions$storename, incomparables = FALSE, fromLast = FALSE))
colnames(df) = "storename"
df
df = data.frame(unique(subset(transactions, Product != "Lost Sales")$Product))
colnames(df) = "Products"
df
df = unique(services[c("vendor","service")])
df = df[order(df$service, df$vendor),]
df
aggregate(Sales ~ region, data = subset(transactions, Product == "Gruppe105"), sum) %>% head()
# Um den Anteil unseres Produktes für Gruppe105 zu berechnen, müssen wir Sales nach Region aggregieren.
# Zudem wird die Tabelle "Product" nach allen Produkten der "Gruppe105" gefiltert.
ActualSales = aggregate(Sales ~ region, data = subset(transactions, Product=="Gruppe105"), sum)
# Um eine Übersicht zu verschaffen, haben wir zwei Spalten "Region" und "Sales %" mit data.frame() in Betracht gezogen.
# Die zweite Spalte "Sales (%)" enthaelt die Summe der Regionen, die durch die aggregierte Sales nach Regionen dividiert wird.
# Anschließend wird die Dezimalzahl um zwei Stellen verschoben indem man die Spalte "Sales (%)" mit 100 multipliziert.
# Spalte "Sales (%)" wird mit der Funktion round() auf die zweite Nachkommastelle gerundet.
ActualSales = data.frame(ActualSales$region,
round(ActualSales$Sales / (aggregate(Sales ~ region, data=transactions, sum))$Sales * 100, 2))
colnames(ActualSales) = c("Region", "Sales (%)")
head(ActualSales)
# Für die Schätzung der Monatsnachfrage rechnen wir mit 21 Arbeitstage im Monat (laut www.arbeitsreche.de), die wir mit AvgSalesPerDay multiplizieren.
DayAggr = aggregate(Day ~ region,data = subset(transactions,Product == "Gruppe105"), sum)
AvgSales = aggregate(Sales ~ region, data = subset(transactions, Product == "Gruppe105"), sum)
#Merge = merge.data.frame(DayAggr, AvgSales,  by.x = "region", by.y = "region")
#Merge = data.frame(Merge$region,
#                   AvgSalesPerDay  = round(Merge$Sales / Merge$Day, 2),
#                   AvgSalesMonth = round(Merge$Sales / Merge$Day, 2) * 21)
#colnames(Merge) = c("region", "Average Sales per Day", "Estimated Average Sales per Month")
#head(Merge)
MinCost = data.frame(aggregate(cost ~ vendor, data = subset(services, services$Product == "Gruppe105" & services$Year == 2018), sum))
MinCost <- MinCost[order(MinCost$cost, decreasing = FALSE),]
head(MinCost, 1)
df = data.frame(aggregate(Sales ~ Year, data = subset(transactions, transactions$Product == "Gruppe105"), sum))
head(df, 5)
profit = data.frame(aggregate(Sales ~ Month, data = subset(transactions, transactions$Month >= 7 &
transactions$Month <= 12 &
transactions$Year == 2020 &
transactions$Product == "Gruppe105"), sum))
# Erklärung zu Column3:
# Dritte Spalte, erste Zeile ist 0.
# Die Funktion tail(Sales,-1) zeigt auf die zweite Sales-Zeile.
# Die Funktion head(Sales,-1) zeigt auf die erste Sales-Zeile.
# Diese beiden Zeilen werden miteinander dividiert und mit round() auf die zweite Nachkommastelle gerundet.
profit = cbind(profit, with(profit, {
data.frame( #Columnx = Sales/Sales[1],
Column3 = c(0, (round(1-(tail(Sales,-1)/head(Sales,-1)), 2) *100)
)
)
}))
colnames(profit) = c("Month", "Sales", "Profit in %")
profit
#Berechnen Sie OTD für alle Dienstleistungen als zusaetzliche Variable der Services Tabelle.
services$OTD = services$DaysScheduled >= services$DaysExecuted
#ODBDD = Orders Delivered on or Before Due Date
shipping_105_vendors_ODBDD <- subset(services, service == "Shipping" & Product == "Gruppe105") %>%
aggregate(OTD ~ vendor, data = ., sum) %>%
setNames(., c("Vendor", "ODBDD"))
#Anzahl an Bestellungen pro Lieferant.
shipping_105_vendors_total_orders <- subset(services, service == "Shipping" & Product == "Gruppe105") %>%
aggregate(OTD ~ vendor, data = ., length) %>%
setNames(., c("Vendor", "total_orders"))
#Beide Dataframes mergen und OTD berechnen.
shipping_105_vendors <- merge(x = shipping_105_vendors_ODBDD, y = shipping_105_vendors_total_orders, by = "Vendor", all = TRUE)
shipping_105_vendors$OTB <- shipping_105_vendors$ODBDD / shipping_105_vendors$total_orders
#Zu Prozent umrechnen
shipping_105_vendors$OTB <- (shipping_105_vendors$OTB * 100) %>% round(., 2)
#Ausgabe, Kennzahl‐Werte aufsteigend sortiert.
shipping_105_vendors <- subset(shipping_105_vendors, select = -c(ODBDD,total_orders))
shipping_105_vendors[order(-shipping_105_vendors$OTB),]
#Clean up
rm(shipping_105_vendors_ODBDD, shipping_105_vendors_total_orders, shipping_105_vendors)
#TODO Was ist wenn die Lieferung zu groß war?
#Berechnen Sie diese Kennzahl zunaechst fuer alle Dienstleistungen als zusaetzliche Variable der Services‐Tabelle.
services$IFR = services$QExecuted / services$QScheduled
#IFR aggregiert für jeden Warehousing-DL berechnen.
warehousing_105_vendors <- subset(services, service == "Warehousing" & Product == "Gruppe105") %>%
aggregate(IFR ~ vendor, data = ., mean)
#Zu Prozent umrechnen.
warehousing_105_vendors$IFR <- (warehousing_105_vendors$IFR * 100) %>% round(., 2)
#Sortieren und ausgeben.
warehousing_105_vendors[order(-warehousing_105_vendors$IFR),]
#Clean up
rm(warehousing_105_vendors)
#Entferne Lost Sales, berechne Marktanteil in Prozent und Runde auf zwei Nachkommastellen.
marktanteil_tortendiagramm <- transactions[!(transactions$Product=="Lost Sales"),] %>%
aggregate(Sales ~ Product, data = ., sum) %>%
mutate(Percent = Sales/sum(Sales)*100)
marktanteil_tortendiagramm$Percent = round(marktanteil_tortendiagramm$Percent, 2)
#Berechne Prozente in Flächeninhalt des Kreises um. Wird gespeichert in lab.ypos
marktanteil_tortendiagramm <- marktanteil_tortendiagramm %>%
mutate(lab.ypos = cumsum(Percent) - 0.5*Percent)
#Unterschiedliche Farben für jeden Marktteilnehmer.
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF", "#9173CcFF", "#7FC000FF", "#861686FF", "#CD134CFF")
#Tortendiagramm zeichnen lassen.
ggplot(marktanteil_tortendiagramm, aes(x = "", y = Percent, fill = Product)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
geom_text(aes(y = lab.ypos, label = Percent), color = "white") +
scale_fill_manual(values = mycols) +
theme_void()
#Clean up
rm(mycols, marktanteil_tortendiagramm)
#Boxplot zeichnen lassen für WH-DL und Gruppe105. Unsere gewählt Kennzahl ist IFR.
subset(services, service=="Warehousing" & Product=="Gruppe105") %>%
ggplot(., aes(x = vendor, y = IFR)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: Beim Ablesen des Boxplots fällt auf wie klein die Unterschiede zwischen den WH-DL sind. VWL Warehousing hat den an IFR=1 nächsten Median, jedoch hat OPS Warehousing eine geringere Standartabweichung und liegt fast gleich auf. Eine eindeutige Entscheidung kann nicht getroffen werden.")
subset(services, service=="Warehousing") %>%
ggplot(., aes(x = vendor, y = region, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: Es fällt auf das DWL Warehousing besonders schlecht in Japan liefert, dort sollte man auf IntEx Warehousing umgesteigen. Generel lässt die Heat-Map leicht ablesen welcher WH-DL in welcher Region gut/schlecht Liefern, gemessen an IFR.")
#Heat-Map zeichen lassen für Shipping-DL, Jahr=2017 und unsere Produkt Gruppe105.
subset(services, service=="Shipping" & Year=="2017" & Product=="Gruppe105") %>%
aggregate(OTD ~vendor+Month, data=., mean) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,12,1))
cat("Kommentar: Das Diagramm zeigt das alle Lieferanten mal gut mal schlecht abschneiden. Besonders schlechte OTD Werte eines Lieferanten stechen sofort durch ein kräftiges Rot ins Auge, während besonders gute OTD Werte durch ein helles Grün auffallen Dank der Struktur des Diagramm kann man schnell Handlungsempfehlungen ableiten. So sollte man z.B. im Februar EPD Shipping meiden und stattdessen auf HCX Shipping setzen.")
knitr::opts_chunk$set(echo = TRUE)
#Setup environment
library(tidyverse)
cost = read.csv2("output_cost_8Players_v0010.csv")
prices = read.csv2("output_prices_8Players_v0010.csv")
services = read.csv2("output_services_8Players_v0010.csv")
transactions = read.csv2("output_transactions_8Players_v0010.csv")
# Zusammenfassung einer Variable anzeigen
summary(cost)
summary(prices)
summary(services)
summary(transactions)
df = data.frame(unique(transactions$storename, incomparables = FALSE, fromLast = FALSE))
colnames(df) = "storename"
df
df = data.frame(unique(subset(transactions, Product != "Lost Sales")$Product))
colnames(df) = "Products"
df
df = unique(services[c("vendor","service")])
df = df[order(df$service, df$vendor),]
df
aggregate(Sales ~ region, data = subset(transactions, Product == "Gruppe105"), sum) %>% head()
# Um den Anteil unseres Produktes für Gruppe105 zu berechnen, müssen wir Sales nach Region aggregieren.
# Zudem wird die Tabelle "Product" nach allen Produkten der "Gruppe105" gefiltert.
ActualSales = aggregate(Sales ~ region, data = subset(transactions, Product=="Gruppe105"), sum)
# Um eine Übersicht zu verschaffen, haben wir zwei Spalten "Region" und "Sales %" mit data.frame() in Betracht gezogen.
# Die zweite Spalte "Sales (%)" enthaelt die Summe der Regionen, die durch die aggregierte Sales nach Regionen dividiert wird.
# Anschließend wird die Dezimalzahl um zwei Stellen verschoben indem man die Spalte "Sales (%)" mit 100 multipliziert.
# Spalte "Sales (%)" wird mit der Funktion round() auf die zweite Nachkommastelle gerundet.
ActualSales = data.frame(ActualSales$region,
round(ActualSales$Sales / (aggregate(Sales ~ region, data=transactions, sum))$Sales * 100, 2))
colnames(ActualSales) = c("Region", "Sales (%)")
head(ActualSales)
# Für die Schätzung der Monatsnachfrage rechnen wir mit 21 Arbeitstage im Monat (laut www.arbeitsreche.de), die wir mit AvgSalesPerDay multiplizieren.
DayAggr = aggregate(Day ~ region,data = subset(transactions,Product == "Gruppe105"), sum)
AvgSales = aggregate(Sales ~ region, data = subset(transactions, Product == "Gruppe105"), sum)
#Merge = merge.data.frame(DayAggr, AvgSales,  by.x = "region", by.y = "region")
#Merge = data.frame(Merge$region,
#                   AvgSalesPerDay  = round(Merge$Sales / Merge$Day, 2),
#                   AvgSalesMonth = round(Merge$Sales / Merge$Day, 2) * 21)
#colnames(Merge) = c("region", "Average Sales per Day", "Estimated Average Sales per Month")
#head(Merge)
MinCost = data.frame(aggregate(cost ~ vendor, data = subset(services, services$Product == "Gruppe105" & services$Year == 2018), sum))
MinCost <- MinCost[order(MinCost$cost, decreasing = FALSE),]
head(MinCost, 1)
df = data.frame(aggregate(Sales ~ Year, data = subset(transactions, transactions$Product == "Gruppe105"), sum))
head(df, 5)
profit = data.frame(aggregate(Sales ~ Month, data = subset(transactions, transactions$Month >= 7 &
transactions$Month <= 12 &
transactions$Year == 2020 &
transactions$Product == "Gruppe105"), sum))
# Erklärung zu Column3:
# Dritte Spalte, erste Zeile ist 0.
# Die Funktion tail(Sales,-1) zeigt auf die zweite Sales-Zeile.
# Die Funktion head(Sales,-1) zeigt auf die erste Sales-Zeile.
# Diese beiden Zeilen werden miteinander dividiert und mit round() auf die zweite Nachkommastelle gerundet.
profit = cbind(profit, with(profit, {
data.frame( #Columnx = Sales/Sales[1],
Column3 = c(0, (round(1-(tail(Sales,-1)/head(Sales,-1)), 2) *100)
)
)
}))
colnames(profit) = c("Month", "Sales", "Profit in %")
profit
#Berechnen Sie OTD für alle Dienstleistungen als zusaetzliche Variable der Services Tabelle.
services$OTD = services$DaysScheduled >= services$DaysExecuted
#ODBDD = Orders Delivered on or Before Due Date
shipping_105_vendors_ODBDD <- subset(services, service == "Shipping" & Product == "Gruppe105") %>%
aggregate(OTD ~ vendor, data = ., sum) %>%
setNames(., c("Vendor", "ODBDD"))
#Anzahl an Bestellungen pro Lieferant.
shipping_105_vendors_total_orders <- subset(services, service == "Shipping" & Product == "Gruppe105") %>%
aggregate(OTD ~ vendor, data = ., length) %>%
setNames(., c("Vendor", "total_orders"))
#Beide Dataframes mergen und OTD berechnen.
shipping_105_vendors <- merge(x = shipping_105_vendors_ODBDD, y = shipping_105_vendors_total_orders, by = "Vendor", all = TRUE)
shipping_105_vendors$OTB <- shipping_105_vendors$ODBDD / shipping_105_vendors$total_orders
#Zu Prozent umrechnen
shipping_105_vendors$OTB <- (shipping_105_vendors$OTB * 100) %>% round(., 2)
#Ausgabe, Kennzahl‐Werte aufsteigend sortiert.
shipping_105_vendors <- subset(shipping_105_vendors, select = -c(ODBDD,total_orders))
shipping_105_vendors[order(-shipping_105_vendors$OTB),]
#Clean up
rm(shipping_105_vendors_ODBDD, shipping_105_vendors_total_orders, shipping_105_vendors)
#Berechnen Sie diese Kennzahl zunaechst fuer alle Dienstleistungen als zusaetzliche Variable der Services‐Tabelle.
services$IFR = services$QExecuted / services$QScheduled
#IFR aggregiert für jeden Warehousing-DL berechnen.
warehousing_105_vendors <- subset(services, service == "Warehousing" & Product == "Gruppe105") %>%
aggregate(IFR ~ vendor, data = ., mean)
#Zu Prozent umrechnen.
warehousing_105_vendors$IFR <- (warehousing_105_vendors$IFR * 100) %>% round(., 2)
#Sortieren und ausgeben.
warehousing_105_vendors[order(-warehousing_105_vendors$IFR),]
#Clean up
rm(warehousing_105_vendors)
#Entferne Lost Sales, berechne Marktanteil in Prozent und Runde auf zwei Nachkommastellen.
marktanteil_tortendiagramm <- transactions[!(transactions$Product=="Lost Sales"),] %>%
aggregate(Sales ~ Product, data = ., sum) %>%
mutate(Percent = Sales/sum(Sales)*100)
marktanteil_tortendiagramm$Percent = round(marktanteil_tortendiagramm$Percent, 2)
#Berechne Prozente in Flächeninhalt des Kreises um. Wird gespeichert in lab.ypos
marktanteil_tortendiagramm <- marktanteil_tortendiagramm %>%
mutate(lab.ypos = cumsum(Percent) - 0.5*Percent)
#Tortendiagramm zeichnen lassen.
ggplot(marktanteil_tortendiagramm, aes(x = "", y = Percent, fill = Product)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
geom_text(aes(y = lab.ypos, label = Percent), color = "white") +
theme_void()
#Clean up
rm(marktanteil_tortendiagramm)
#Boxplot zeichnen lassen für WH-DL und Gruppe105. Unsere gewählt Kennzahl ist IFR.
subset(services, service=="Warehousing" & Product=="Gruppe105") %>%
ggplot(., aes(x = vendor, y = IFR)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) #X-Achsenbezeichnung anpassen, damit es lesbar ist.
cat("Kommentar: Beim Ablesen des Boxplots fällt auf wie klein die Unterschiede zwischen den WH-DL sind. VWL Warehousing hat den an IFR=1 nächsten Median, jedoch hat OPS Warehousing eine geringere Standartabweichung und liegt beim Median fast gleich auf. Eine eindeutige Entscheidung kann nicht getroffen werden.")
subset(services, service=="Warehousing") %>%
ggplot(., aes(x = vendor, y = region, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1))
cat("Kommentar: Es fällt auf das DWL Warehousing besonders schlecht in Japan liefert, dort sollte man auf IntEx Warehousing umgesteigen. Generel lässt die Heat-Map leicht ablesen welcher WH-DL in welcher Region gut/schlecht Liefern, gemessen an IFR.")
#Heat-Map zeichen lassen für Shipping-DL, Jahr=2017 und unser Produkt Gruppe105.
subset(services, service=="Shipping" & Year=="2017" & Product=="Gruppe105") %>%
aggregate(OTD ~vendor+Month, data=., mean) %>%
ggplot(., aes(x = vendor, y = Month, fill = OTD)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=1)) +
scale_y_continuous(breaks=seq(1,12,1)) #Y-Achsen Bezeichnung ändern
cat("Kommentar: Das Diagramm zeigt das alle Lieferanten mal gut mal schlecht abschneiden. Besonders schlechte OTD Werte eines Lieferanten stechen sofort durch ein kräftiges Rot ins Auge, während besonders gute OTD Werte durch ein helles Grün auffallen. Dank der Struktur des Diagramms kann man schnell Handlungsempfehlungen ableiten. So sollte man z.B. im Februar EPD Shipping meiden und stattdessen auf HCX Shipping setzen.")
