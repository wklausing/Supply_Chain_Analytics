cat("Der durchschnittliche Umsatz je Bestellung betraegt", round(mean(electronics$PriceTotal), 2),"$")
# Auspraegungen einer Variable mit Anzahl der Auspraegungen tabellarisieren ("aggregieren")
table(electronics$Location)
#Zum Zwecke von Uebersicht und Struktur: Umwandlung in Dataframe
locations = data.frame(table(electronics$Location))
colnames(locations) = c("Location","Order count")
locations
# Auspraegungen mit Funktionen tabellarisieren ("aggregieren")
tapply(electronics$PriceTotal, electronics$ServiceLevel, sum)
#Umsatz je Service Level (sortiert)
sort(tapply(electronics$PriceTotal, electronics$Location, sum))
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), nur die ersten 4
sort(tapply(electronics$PriceTotal, electronics$Location, sum))[1:4]
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), nummer 3 bis 6
sort(tapply(electronics$PriceTotal, electronics$Location, sum))[3:6]
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), Tabellenkopf (obersten 6)
head(sort(tapply(electronics$PriceTotal, electronics$Location, sum)))
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), Tabellenende (untersten 6)
tail(sort(tapply(electronics$PriceTotal, electronics$Location, sum)))
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(sort(tapply(electronics$PriceTotal, electronics$OrderNo, sum)))
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
sort(tapply(electronics$PriceTotal, electronics$CustomerName, mean))[1:20]
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
sort(tapply(electronics$PriceTotal, electronics$CustomerName, mean), decreasing = TRUE)[1:10]
# Spalte einer Variable anlegen
electronics$OCT = electronics$TimeWarehouse + electronics$TimeTransit
# Anzeigen einer Auswahl: Zeile 1 bis 10, Spalten LSP und OCT
electronics[1:10 , c("LSP", "OCT")]
# Auszug aus Daten / Auswahl an Daten / eingeschraenkten Datensatz einer neuen Variable uebergeben
FrenchOrders = electronics[electronics$Location == "France", c("Customer", "CustomerName", "Location")]
# Daten anzeigen
head(FrenchOrders)
# Auszug aus Daten / Auswahl an Daten / eingeschraenkten Datensatz einer neuen Variable uebergeben
FrenchOrders = subset(electronics, Location == "France")
# Daten anzeigen
head(FrenchOrders)
# mit select expression
head(electronics[electronics$Location == "France" & electronics$ServiceLevel == 24 ,])
# mit subset Funktion
head(subset(electronics, Location == "France" & ServiceLevel == 24))
#(1) Item Fill Rate (IFR) pro Bestellung (d.h. Zeilen des Data Frame) berechnen und als Spalte 'IFR' dem DF 'electronics' hinzufuegen
# Antwort (NA ersetzen):
electronics$IFR = electronics$ItemsReceived / electronics$ItemsOrdered
#(2) Mittlere IFR berechnen
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
mean(electronics$IFR)
#(1) OTD-Rate pro Bestellung (d.h. Zeilen des Data Frame) berechnen und als Spalte 'OTD' dem DF 'electronics' hinzufuegen. Hinweis: Es reicht aus, nach dem Gleichzeichen die Bedingung zu schreiben
# Antwort (NA ersetzen):
electronics$OTD = electronics$OCT <= electronics$ServiceLevel
#(2) Mittlere OTD berechnen
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
mean(electronics$OTD)
#(1) Neues DF 'RevenueCou' mit aufsummierten Umsatz je Land
# Antwort (NA ersetzen):
RevenueCou = aggregate(PriceTotal ~ Location, data = electronics, sum)
#(2) Zeigen Sie den Tabellenkopf des DF RevenueCou
head(RevenueCou)
#(1) Neues DF 'IFRCust' mit mittlerer IFR je Kunden
# Antwort (NA ersetzen):
IFRCust = aggregate(IFR ~ Customer, data = electronics, mean)
#(2) Zeigen Sie den Tabellenkopf des DF IFRCust
head(IFRCust)
#(1) Neues DF 'LSP' mit mittlerer Transit time je Logistics Service Provider, nur fuer
# Bestellungen mit Service Level == 24h
# Antwort (NA ersetzen):
LSP = aggregate(TimeTransit ~ LSP, data = subset(electronics, ServiceLevel == 24), mean)
#(2) anschliessend umbenennen, um den Ueberblick zu behalten!
names(LSP)[2] = "TimeTransit(24h)"
# Anzeigen des Tabellenkopfs vom DF 'LSP'
head(LSP)
#(3) Neues Hilfs-DF LSP2 mit mittlerer Transit time je Logistics Service Provider, nur
# fuer Bestellungen mit Service Level == 36h
# Antwort (NA ersetzen):
LSP2 = aggregate(TimeTransit ~ LSP, data = subset(electronics, ServiceLevel == 36), mean)
#(4) Verbinden ("Verschmelzen") der Data Frames ueber das Attribut "LSP"
# Antwort (NA ersetzen):
LSP = merge(LSP, LSP2, by.x = "LSP", by.y = "LSP")
#(5) anschliessend umbenennen, um Ueberblick zu behalten! (Alternativer Aufruf der
# umzubenennenden Spalte)
names(LSP)[names(LSP) == "TimeTransit"] = "TimeTransit(36h)"
# Anzeigen des Tabellenkopfs vom DF 'LSP'
head(LSP)
#(6) Verbinden der Schritte (3) und (4) fuer Service Level == 48h. Hier muss kein Hilfs-DF erstellt werden.
# Antwort (NA ersetzen):
LSP = merge(LSP, aggregate(TimeTransit ~ LSP, data = subset(electronics, ServiceLevel == 48), mean), by.x = "LSP", by.y = "LSP")
#(7) anschliessend umbenennen, um Ueberblick zu behalten!
names(LSP)[names(LSP) == "TimeTransit"] = "TimeTransit(48h)"
# Anzeigen des Tabellenkopfs vom DF 'LSP'
head(LSP)
library("ggplot2")
# (1) Leerer Plot
ggplot()
# (2) Plot mit Daten. Durch Auswahl des Data Frame als "data =", koennen die Spalten
# ohne zusaetzliche Nennung des DF bei der Festlegung der aesthetics genutzt werden. Die
# Daten sind nicht erkennbar, da keine Art des Plots festgelegt wurde
ggplot(data = electronics,
aes(x = OrderNo, y = TimeTransit))
# (3) Plot mit Daten und Festlegung der Art des Plots
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit)) +
geom_point()
# (4) Plot mit Daten, Festlegung der Art des Plots und Farben des Plots nach dritter
# Variable
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = ServiceLevel)) +
geom_point()
# (5) Plot mit Daten, Festlegung der Art des Plots und Farben des Plots nach dritter
# Variable (die zu einer Faktor-Variable umgewandelt ("typecasted") wird)
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel))) +
geom_point()
# (6) Plot entsprechend (5) mit unterschiedlichen Formen
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel), shape = as.factor(ServiceLevel))) +
geom_point()
# (7) Plot entsprechend (6) mit manuell festgelegten Farben
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel), shape = as.factor(ServiceLevel))) +
geom_point() +
scale_colour_manual(values = c("red", "blue", "purple"))
# (8) Plot entsprechend (7) mit manuell festgelegten Achsenbeschriftungen
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel), shape = as.factor(ServiceLevel))) +
geom_point() +
scale_colour_manual(values = c("red", "blue", "purple")) + scale_x_continuous(breaks = c(4329000, 4330000, 4331000, 4332000), labels = c("2014", "2015", "2016", "2017")) + xlab("Year")
# (1) Boxplot der bestellten Items (eindimensional / "einfach")
ggplot(electronics,
aes(x = "", y = ItemsOrdered)) + geom_boxplot()
# (2) Boxplot der bestellten Items nach Land
ggplot(electronics,
aes(x = Location, y = ItemsOrdered)) + geom_boxplot()
# (1) Histogramm der Umsaetze je Order
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram()
# (2) Plot entsprechend (1) mit Fuellfarbe und Raendern
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram(fill = "dodgerblue", colour = "firebrick")
# (3) Plot entsprechend (2) mit angepasster Bins ueber Bin-Groesse
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram(binwidth = 500, fill = "dodgerblue", colour = "firebrick")
# (4) Plot entsprechend (2) mit angepasster Bins ueber Anzahl Bin
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram(bins = 150, fill = "dodgerblue", colour = "firebrick")
# (1) Heat Map der Transitzeit nach OrderNo
ggplot(electronics,
aes(x = OrderNo, y = "", fill = TimeTransit)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
ggplot(electronics,
aes(x = OrderNo, y = "", fill = TimeTransit)) +
geom_raster() +
scale_fill_gradient(low = "green", high = "red")
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(electronics,
aes(x = LSP, y = Location, fill = TimeTransit)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
ggplot(electronics,
aes(x = LSP, y = Location, fill = TimeTransit)) +
geom_raster() +
scale_fill_gradient(low = "green", high="red")
# Achtung! Diese Darstellung zeigt nicht die durchschnittliche Transit Time an. Zu diesem Zweck muesste zunaechst ein aggregiertes DF erzeugt werden. Die beiden Darstellungen "stapeln" quasi alle Beobachtungen uebereinander und zeigen somit immer nur die letzte Beobachtung aus der jeweiligen Kategorie an.
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(services,
aes(x = IFR, y = Location, fill = TimeTransit)) +
geom_raster()
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(services,
aes(x = IFR, y = region, fill = TimeTransit)) +
geom_raster()
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(services,
aes(x = IFR, y = Region, fill = TimeTransit)) +
geom_raster()
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(services,
aes(x = IFR, y = region, fill = TimeTransit)) +
geom_raster()
View(electronics)
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(services,
aes(x = vendor, y = region, fill = TimeTransit)) +
geom_raster()
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(services,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
ggplot(electronics,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "green", high="red")
# (1) Heat Map der Transitzeit ueber LSP und Location
subset(services, service=="Warehousing") %>% ggplot(.,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
ggplot(electronics,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "green", high="red")
# (1) Heat Map der Transitzeit ueber LSP und Location
subset(services, service=="Warehousing") %>% ggplot(.,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
ggplot(services,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "green", high="red")
# (1) Heat Map der Transitzeit ueber LSP und Location
subset(services, service=="Warehousing") %>% ggplot(.,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
subset(services, service=="Warehousing") %>% ggplot(.,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "green", high="red")
subset(services, service=="Warehousing") %>% ggplot(.,
aes(x = vendor, y = region, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "red", high="green")
Time
Time
Time
# Antwort (bitte "data = electronic" ersetzen entsprechend Aufgabenstellung):
ggplot(data = subset(electronics, LSP == "AHL"),
aes(x = OrderNo, y = TimeTransit)) +
geom_point()
# Antwort (NULL ersetzen und anpassung von P5-4F (1) uebernehmen):
ggplot(subset(electronics, LSP == "AHL"),
aes(x = OrderNo, y = TimeTransit)) +
xlim(4330500, 4330675) +
geom_point()
# Anzeige
head(subset(electronics, LSP == "AHL" & OrderNo > 4330525 & OrderNo < 4330600 & TimeTransit > 50))
# Antwort (NA ersetzen):
outliers = subset(electronics, LSP == "AHL" & OrderNo > 4330525 & OrderNo < 4330600 & TimeTransit > 50)
# Lassen Sie sich den Tabellenkopf von outliers anzeigen
head(outliers)
# Antwort (NA ersetzen):
electronics = subset(electronics, !(LSP == "AHL" & OrderNo > 4330525 & OrderNo < 4330600 & TimeTransit > 50))
# Lassen Sie sich zur Ueberpruefung erneut den Plot entsprechend (1) anzeigen. Stellen Sie daher die Y-Achse auf 0 bis 200 ein. Dies benoetigt die (angepasste) Erweiterung von (2).
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
ggplot(data = subset(electronics, LSP == "AHL"),
aes(x = OrderNo, y = TimeTransit)) +
geom_point()
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
ggplot(electronics,
aes(x = TimeTransit)) +
geom_histogram(colour = "darkred", fill = "linen")
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
ggplot(electronics,
aes(x = ServiceContract, y = TimeTransit)) +
geom_boxplot()
# Antwort (NA ersetzen):
electronics$ServiceContract = paste(electronics$LSP, electronics$ServiceLevel)
#Lassen Sie sich zur Pruefung der Loesung den Tabellenkopf von electronics anzeigen. (Die neue Spalte muesste die letzte sein.)
head(electronics)
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
ggplot(electronics,
aes(x = ServiceContract, y = TimeTransit)) +
geom_boxplot()
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
mean(electronics$IFR)
# Antwort (NA ersetzen):
electronics$IFR = electronics$ItemsReceived / electronics$ItemsOrdered
#Wiederholen Sie den Befehl aus (6), um zu pruefen, ob Ihre Loesung funktioniert hat. Es duerfte kein Datensatz angezeigt werden.
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(subset(electronics, IFR == 0))
# Laden der Daten
electronics = read.csv2("05_Problem_Set_5.csv")
# Environment zusammenfassen und anzeigen
ls()
# Struktur einer Variable anzeigen
str(electronics)
# Zusammenfassung einer Variable anzeigen
summary(electronics)
# Mittelwert ausgeben
mean(electronics$PriceTotal)
#Zum Zwecke von Uebersicht und Struktur: cat()-Funktion nutzen
cat("Der durchschnittliche Umsatz je Bestellung betraegt", mean(electronics$PriceTotal),"$","\n")
#Dazu kann man noch sinnvoll runden:
cat("Der durchschnittliche Umsatz je Bestellung betraegt", round(mean(electronics$PriceTotal), 2),"$")
# Auspraegungen einer Variable mit Anzahl der Auspraegungen tabellarisieren ("aggregieren")
table(electronics$Location)
#Zum Zwecke von Uebersicht und Struktur: Umwandlung in Dataframe
locations = data.frame(table(electronics$Location))
colnames(locations) = c("Location","Order count")
locations
# Auspraegungen mit Funktionen tabellarisieren ("aggregieren")
tapply(electronics$PriceTotal, electronics$ServiceLevel, sum)
#Umsatz je Service Level (sortiert)
sort(tapply(electronics$PriceTotal, electronics$Location, sum))
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), nur die ersten 4
sort(tapply(electronics$PriceTotal, electronics$Location, sum))[1:4]
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), nummer 3 bis 6
sort(tapply(electronics$PriceTotal, electronics$Location, sum))[3:6]
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), Tabellenkopf (obersten 6)
head(sort(tapply(electronics$PriceTotal, electronics$Location, sum)))
cat("\n \n") # Leerzeile fuer Anschaulichkeit, bitte ignorieren
#Umsatz je Service Level (sortiert), Tabellenende (untersten 6)
tail(sort(tapply(electronics$PriceTotal, electronics$Location, sum)))
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(sort(tapply(electronics$PriceTotal, electronics$OrderNo, sum)))
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
sort(tapply(electronics$PriceTotal, electronics$CustomerName, mean))[1:20]
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
sort(tapply(electronics$PriceTotal, electronics$CustomerName, mean), decreasing = TRUE)[1:10]
# Spalte einer Variable anlegen
electronics$OCT = electronics$TimeWarehouse + electronics$TimeTransit
# Anzeigen einer Auswahl: Zeile 1 bis 10, Spalten LSP und OCT
electronics[1:10 , c("LSP", "OCT")]
# Auszug aus Daten / Auswahl an Daten / eingeschraenkten Datensatz einer neuen Variable uebergeben
FrenchOrders = electronics[electronics$Location == "France", c("Customer", "CustomerName", "Location")]
# Daten anzeigen
head(FrenchOrders)
# Auszug aus Daten / Auswahl an Daten / eingeschraenkten Datensatz einer neuen Variable uebergeben
FrenchOrders = subset(electronics, Location == "France")
# Daten anzeigen
head(FrenchOrders)
# mit select expression
head(electronics[electronics$Location == "France" & electronics$ServiceLevel == 24 ,])
# mit subset Funktion
head(subset(electronics, Location == "France" & ServiceLevel == 24))
#(1) Item Fill Rate (IFR) pro Bestellung (d.h. Zeilen des Data Frame) berechnen und als Spalte 'IFR' dem DF 'electronics' hinzufuegen
# Antwort (NA ersetzen):
electronics$IFR = electronics$ItemsReceived / electronics$ItemsOrdered
#(2) Mittlere IFR berechnen
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
mean(electronics$IFR)
#(1) OTD-Rate pro Bestellung (d.h. Zeilen des Data Frame) berechnen und als Spalte 'OTD' dem DF 'electronics' hinzufuegen. Hinweis: Es reicht aus, nach dem Gleichzeichen die Bedingung zu schreiben
# Antwort (NA ersetzen):
electronics$OTD = electronics$OCT <= electronics$ServiceLevel
#(2) Mittlere OTD berechnen
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
mean(electronics$OTD)
#(1) Neues DF 'RevenueCou' mit aufsummierten Umsatz je Land
# Antwort (NA ersetzen):
RevenueCou = aggregate(PriceTotal ~ Location, data = electronics, sum)
#(2) Zeigen Sie den Tabellenkopf des DF RevenueCou
head(RevenueCou)
#(1) Neues DF 'IFRCust' mit mittlerer IFR je Kunden
# Antwort (NA ersetzen):
IFRCust = aggregate(IFR ~ Customer, data = electronics, mean)
#(2) Zeigen Sie den Tabellenkopf des DF IFRCust
head(IFRCust)
#(1) Neues DF 'LSP' mit mittlerer Transit time je Logistics Service Provider, nur fuer
# Bestellungen mit Service Level == 24h
# Antwort (NA ersetzen):
LSP = aggregate(TimeTransit ~ LSP, data = subset(electronics, ServiceLevel == 24), mean)
#(2) anschliessend umbenennen, um den Ueberblick zu behalten!
names(LSP)[2] = "TimeTransit(24h)"
# Anzeigen des Tabellenkopfs vom DF 'LSP'
head(LSP)
#(3) Neues Hilfs-DF LSP2 mit mittlerer Transit time je Logistics Service Provider, nur
# fuer Bestellungen mit Service Level == 36h
# Antwort (NA ersetzen):
LSP2 = aggregate(TimeTransit ~ LSP, data = subset(electronics, ServiceLevel == 36), mean)
#(4) Verbinden ("Verschmelzen") der Data Frames ueber das Attribut "LSP"
# Antwort (NA ersetzen):
LSP = merge(LSP, LSP2, by.x = "LSP", by.y = "LSP")
#(5) anschliessend umbenennen, um Ueberblick zu behalten! (Alternativer Aufruf der
# umzubenennenden Spalte)
names(LSP)[names(LSP) == "TimeTransit"] = "TimeTransit(36h)"
# Anzeigen des Tabellenkopfs vom DF 'LSP'
head(LSP)
#(6) Verbinden der Schritte (3) und (4) fuer Service Level == 48h. Hier muss kein Hilfs-DF erstellt werden.
# Antwort (NA ersetzen):
LSP = merge(LSP, aggregate(TimeTransit ~ LSP, data = subset(electronics, ServiceLevel == 48), mean), by.x = "LSP", by.y = "LSP")
#(7) anschliessend umbenennen, um Ueberblick zu behalten!
names(LSP)[names(LSP) == "TimeTransit"] = "TimeTransit(48h)"
# Anzeigen des Tabellenkopfs vom DF 'LSP'
head(LSP)
library("ggplot2")
# (1) Leerer Plot
ggplot()
# (2) Plot mit Daten. Durch Auswahl des Data Frame als "data =", koennen die Spalten
# ohne zusaetzliche Nennung des DF bei der Festlegung der aesthetics genutzt werden. Die
# Daten sind nicht erkennbar, da keine Art des Plots festgelegt wurde
ggplot(data = electronics,
aes(x = OrderNo, y = TimeTransit))
# (3) Plot mit Daten und Festlegung der Art des Plots
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit)) +
geom_point()
# (4) Plot mit Daten, Festlegung der Art des Plots und Farben des Plots nach dritter
# Variable
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = ServiceLevel)) +
geom_point()
# (5) Plot mit Daten, Festlegung der Art des Plots und Farben des Plots nach dritter
# Variable (die zu einer Faktor-Variable umgewandelt ("typecasted") wird)
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel))) +
geom_point()
# (6) Plot entsprechend (5) mit unterschiedlichen Formen
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel), shape = as.factor(ServiceLevel))) +
geom_point()
# (7) Plot entsprechend (6) mit manuell festgelegten Farben
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel), shape = as.factor(ServiceLevel))) +
geom_point() +
scale_colour_manual(values = c("red", "blue", "purple"))
# (8) Plot entsprechend (7) mit manuell festgelegten Achsenbeschriftungen
ggplot(electronics,
aes(x = OrderNo, y = TimeTransit, colour = as.factor(ServiceLevel), shape = as.factor(ServiceLevel))) +
geom_point() +
scale_colour_manual(values = c("red", "blue", "purple")) + scale_x_continuous(breaks = c(4329000, 4330000, 4331000, 4332000), labels = c("2014", "2015", "2016", "2017")) + xlab("Year")
# (1) Boxplot der bestellten Items (eindimensional / "einfach")
ggplot(electronics,
aes(x = "", y = ItemsOrdered)) + geom_boxplot()
# (2) Boxplot der bestellten Items nach Land
ggplot(electronics,
aes(x = Location, y = ItemsOrdered)) + geom_boxplot()
# (1) Histogramm der Umsaetze je Order
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram()
# (2) Plot entsprechend (1) mit Fuellfarbe und Raendern
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram(fill = "dodgerblue", colour = "firebrick")
# (3) Plot entsprechend (2) mit angepasster Bins ueber Bin-Groesse
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram(binwidth = 500, fill = "dodgerblue", colour = "firebrick")
# (4) Plot entsprechend (2) mit angepasster Bins ueber Anzahl Bin
ggplot(electronics,
aes(x = PriceTotal)) +
geom_histogram(bins = 150, fill = "dodgerblue", colour = "firebrick")
# (1) Heat Map der Transitzeit nach OrderNo
ggplot(electronics,
aes(x = OrderNo, y = "", fill = TimeTransit)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
ggplot(electronics,
aes(x = OrderNo, y = "", fill = TimeTransit)) +
geom_raster() +
scale_fill_gradient(low = "green", high = "red")
# (1) Heat Map der Transitzeit ueber LSP und Location
ggplot(electronics,
aes(x = LSP, y = Location, fill = TimeTransit)) +
geom_raster()
# (2) Plot entsprechend (1) mit manueller Farbwahl
ggplot(electronics,
aes(x = LSP, y = Location, fill = TimeTransit)) +
geom_raster() +
scale_fill_gradient(low = "green", high="red")
# Achtung! Diese Darstellung zeigt nicht die durchschnittliche Transit Time an. Zu diesem Zweck muesste zunaechst ein aggregiertes DF erzeugt werden. Die beiden Darstellungen "stapeln" quasi alle Beobachtungen uebereinander und zeigen somit immer nur die letzte Beobachtung aus der jeweiligen Kategorie an.
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
table(electronics$LSP)
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
electronics$LSP = sub("AJL", "AHL", electronics$LSP, fixed = TRUE)
# Erzeugen Sie eine weitere Haufigkeitstabelle, um zu pruefen, ob Ihre Loesung funktioniert hat.
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
table(electronics$LSP)
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
table(electronics$Location)
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
subset(electronics, Location == "")
# Daten ueberschreiben
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
electronics[electronics$Location == "" ,]$Location = "UK"
# Erzeugen Sie eine weitere Haufigkeitstabelle, um zu pruefen, ob Ihre Loesung funktioniert hat.
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
table(electronics$Location)
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
ggplot(electronics,
aes(x = OrderNo, y = Location, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "red", high = "green")
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(subset(electronics, IFR >= 2))
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
electronics[electronics$IFR >= 2 ,]$ItemsReceived = electronics[electronics$IFR >= 2 ,]$ItemsOrdered
#Wiederholen Sie den Befehl aus (2), um zu pruefen, ob Ihre Loesung funktioniert hat.
# ItemsOrdered sollte ItemsReceived entsprechen. Die IFR muesste weiterhin fehlerhaft sein.
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(subset(electronics, IFR >= 2))
# Antwort (NA ersetzen):
electronics$IFR = electronics$ItemsReceived / electronics$ItemsOrdered
#Wiederholen Sie den Befehl aus (2), um zu pruefen, ob Ihre Loesung funktioniert hat.
# Es duerfte kein Datensatz angezeigt werden.
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(subset(electronics, IFR >= 2))
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
ggplot(electronics,
aes(x = OrderNo, y = Location, fill = IFR)) +
geom_raster() +
scale_fill_gradient(low = "red", high = "green")
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(subset(electronics, IFR == 0) )
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
electronics[electronics$IFR == 0 ,]$ItemsReceived = electronics[electronics$IFR == 0,]$ItemsOrdered
#Wiederholen Sie den Befehl aus (6), um zu pruefen, ob Ihre Loesung funktioniert hat. ItemsOrdered sollte ItemsReceived entsprechen. Die IFR muesste weiterhin fehlerhaft sein.
# Antwort (bitte "NULL" ersetzen und vollstaendige verschachtelte Funktion formulieren):
head(subset(electronics, IFR == 0))
