---
title: "SCA_WS2021_Gruppe105_HA1"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

1) Alle 4 Dateien wurden importiert und wurden als Variablen mit passenden Namen gespeichert. Eine Zusammenfassung von jeder Variable wird ausgegeben.
```{r}
cost = read.csv2("output_cost_8Players_v0010.csv")
prices = read.csv2("output_prices_8Players_v0010.csv")
services = read.csv2("output_services_8Players_v0010.csv")
transactions = read.csv2("output_transactions_8Players_v0010.csv")

# Zusammenfassung einer Variable anzeigen
summary(cost)
```
```{r}
summary(prices)
```

```{r}
summary(services)
```

```{r}
summary(transactions)
```



2) Extrahieren Sie aus den Transaktionsdaten eine Tabelle aller existierenden Supermaerkte, in der jeder Supermarkt nur einmal enthalten ist.
```{r}
df = data.frame(unique(transactions$storename, incomparables = FALSE, fromLast = FALSE))
colnames(df) = "storename"
df
```

3) Extrahieren Sie aus den Transaktionsdaten eine Tabelle aller existierenden Produkte, in der jedes Produkt nur einmal enthalten ist.
```{r}
df = data.frame(unique(subset(transactions, Product != "Lost Sales")$Product))
colnames(df) = "Products"
df
```


4) Extrahieren Sie aus den Servicedaten eine Tabelle aller 20 Logistikdienstleister mitsamt deren Dienstleistungen. Jeder Logistikdienstleister soll in der Liste nur einmal enthalten sein. Sortieren Sie die Tabelle nach Shipping‐DL und Warehousing‐DL. 

```{r}
df = unique(services[c("vendor","service")])
df = df[order(df$service, df$vendor),] 
df
```



5) Berechnen Sie fuer Ihre Produkte/Gruppe die verkauften Mengen (Sales) je Region. Nutzen Sie eine einzige verkettete Anweisung fuer diese Aufgabe. 
```{r}
aggregate(Sales ~ region, data = subset(transactions, Product == "Gruppe105"), sum) %>% head()
```


6) Berechnen Sie fuer jede Region den Anteil Ihres Produkts an der tatsaechlich verkauften Menge (in %).
```{r}
# Um den Anteil unseres Produktes für Gruppe105 zu berechnen, müssen wir Sales nach Region aggregieren. 
# Zudem wird die Tabelle "Product" nach allen Produkten der "Gruppe105" gefiltert.
ActualSales = aggregate(Sales ~ region, data = subset(transactions, Product=="Gruppe105"), sum)

# Um eine Übersicht zu verschaffen, haben wir zwei Spalten "Region" und "Sales %" mit data.frame() in Betracht gezogen.
# Die zweite Spalte "Sales (%)" enthaelt die Summe der Regionen, die durch die aggregierte Sales nach Regionen dividiert wird. 
# Anschließend wird die Dezimalzahl um zwei Stellen verschoben indem man die Spalte "Sales (%)" mit 100 multipliziert.
# Spalte "Sales (%)" wird mit der Funktion round() auf die zweite Nachkommastelle gerundet.
ActualSales = data.frame(ActualSales$region, 
                   round(ActualSales$Sales / (aggregate(Sales ~ region, data=transactions, sum))$Sales * 100, 2))
colnames(ActualSales) = c("Region", "Sales (%)")

head(ActualSales)
```



7) Berechnen Sie die durchschnittliche Nachfrage an verkauften Produkten pro Tag nach **Ihren Produkten/Gruppe** je Region. 
Schaetzen Sie anschliessend die Monatsnachfrage mit einer Rechnung. Geben Sie alles in einer Tabelle aus.
```{r}
# Für die Schätzung der Monatsnachfrage rechnen wir mit 21 Arbeitstage im Monat (laut www.arbeitsreche.de), die wir mit AvgSalesPerDay multiplizieren.

DayAggr = aggregate(Day ~ region,data = subset(transactions,Product == "Gruppe105"), sum)
AvgSales = aggregate(Sales ~ region, data = subset(transactions, Product == "Gruppe105"), sum)

Merge = merge.data.frame(DayAggr, AvgSales,  by.x = "region", by.y = "region")
Merge = data.frame(Merge$region, 
                   AvgSalesPerDay  = round(Merge$Sales / Merge$Day, 2),
                   AvgSalesMonth = round(Merge$Sales / Merge$Day, 2) * 21)
colnames(Merge) = c("region", "Average Sales per Day", "Estimated Average Sales per Month")
head(Merge)



```


8) Geben Sie den Logistikdienstleister aus, fuer den Ihre Gruppe im Jahr 2018 die niedrigsten Kosten zu verzeichnen hat.
```{r}
MinCost = data.frame(aggregate(cost ~ vendor, data = subset(services, services$Product == "Gruppe105" & services$Year == 2018), sum))
MinCost <- MinCost[order(MinCost$cost, decreasing = FALSE),]
head(MinCost, 1)

```


9) Berechnen Sie fuer die vergangenen 5 Jahre den Profit je Jahr. Bewertungsrelevant: Output.
```{r}
df = data.frame(aggregate(Sales ~ Year, data = subset(transactions, transactions$Product == "Gruppe105"), sum))
head(df, 5)
```

10) Berechnen Sie den Profit des letzten halben Jahres im Datensatz (07/2020 ‐ 12/2020) je Monat. 
Erzeugen Sie hierfuer ein DataFrame profit, welche den Profit je Monat als Variablen speichert. 
Berechnen Sie ausserdem die Veraenderung des Profits (in %) von Monat zu Monat ueber die letzten 6 Monate als zusaetzliche Spalte fuer das DataFrame profit. Dabei sollte die Veraenderung fuer die erste Zeile 0 sein. 
Geben Sie das DataFrame aus. Bewertungsrelevant: Code, Output.
```{r}
profit = data.frame(aggregate(Sales ~ Month, data = subset(transactions, transactions$Month >= 7 &
                                                                         transactions$Month <= 12 &
                                                                         transactions$Year == 2020 &
                                                                         transactions$Product == "Gruppe105"), sum))
# Erklärung zu Column3: 
# Dritte Spalte, erste Zeile ist 0. 
# Die Funktion tail(Sales,-1) zeigt auf die zweite Sales-Zeile. 
# Die Funktion head(Sales,-1) zeigt auf die erste Sales-Zeile.
# Diese beiden Zeilen werden miteinander dividiert und mit round() auf die zweite Nachkommastelle gerundet.

profit = cbind(profit, with(profit, {
              data.frame( #Columnx = Sales/Sales[1],
                           Column3 = c(0, (round(1-(tail(Sales,-1)/head(Sales,-1)), 2) *100)
                                     )
                        )     
}))
colnames(profit) = c("Month", "Sales", "Profit in %")
profit
```


11) Berechnen Sie, wie viel fuer Ihre Produkte/Gruppe ueber den gesamten Zeitraum fuer Transportdienstleistungen ausgegeben wurde. Berechnen Sie dazu 2 Kennzahlen (einzeln zu berechnen): 
(1) Wie viel wurde fuer verspaetete Transportdienstleistungen ausgegeben und 
(2) wie viel wurde fuer puenktliche Transportdienstleis‐ tungen ausgegeben. Bewertungsrelevant: Output.
```{r}

```



12) Berechnen Sie, wie viel Sie die reale Ausfuehrung einer Lagerdienstleistung tatsaechlich kostet. D.h. rechnen Sie die Gesamtkosten, die Ihr Produkt/Gruppe fuer Qscheduled erzeugt hat, auf die tatsaechliche Lagerleistung (QExecuted) um. (1) Geben Sie die Kosten pro Stueck an. (2) Berechnen Sie anschliessend, wie viel Prozent Sie mehr bezahlt haben (bei einem Vergleich von Kosten QExecuted pro Steuck zu Kosten QScheduled pro Stueck). Bewertungsrelevant: Output.
```{r}

```







```{r}
library(ggplot2) #Library Import
daten = aggregate(Sales~Product, data=transactions, sum)

ggplot(data=daten, aes(x=Product, y=Sales, fill=Product))
```




